
import java.io.*;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/*
 * The purpose of this program is to design and implement a GUI of a client and
 * server communicatin. The GUI has the user type in an IP address and port
 * number they wish to communicate with. Once the information is entered, 
 * the connect button allows the user to establish communicaton to the desired
 * server. The user may connect and disconnect to the server as they please. 
 * Once connected, the user then can type in messages to send to the server. 
 * There is a button labled "Send" which sends the messages to the server. 
 * The communication is limted by the "knock knock" protocall. The user must 
 * follow the template of a knock knock joke, otherwise the server will respond
 * with "???". If the user types "quit" then the server will be dissconected 
 * and a message will be displayed. 
 */
    

/**
 *
 * @author schultzder
 */
public class ClientInterface extends javax.swing.JFrame {
   
    /*
     *  Delcration of global variables. 
     */
    
    Socket welcomeSocket;
    BufferedReader in;
    DataOutputStream out;
    String clientInput = "", serverOutput = "";
    String errMsg = null;
    
   

    /**
     * Creates new form ClientInterface
     */
    public ClientInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_IP = new javax.swing.JLabel();
        lbl_Port = new javax.swing.JLabel();
        txt_IP = new javax.swing.JTextField();
        txt_Port = new javax.swing.JTextField();
        lbl_server_message = new javax.swing.JLabel();
        txt_server_message = new javax.swing.JTextField();
        btn_Send = new javax.swing.JButton();
        lbl_communication = new javax.swing.JLabel();
        btn_Connect = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_Communication = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Program 1 Knock Knock Client");
        setName("Program 1 Knock Knock Client"); // NOI18N

        lbl_IP.setText("IP Address");

        lbl_Port.setText("Port Number");

        txt_IP.setText("137.104.21.4");

        txt_Port.setText("5764");

        lbl_server_message.setText("Message to Server");
        lbl_server_message.setToolTipText("");

        txt_server_message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_server_messageActionPerformed(evt);
            }
        });

        btn_Send.setText("Send");
        btn_Send.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_SendMouseClicked(evt);
            }
        });
        btn_Send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SendActionPerformed(evt);
            }
        });

        lbl_communication.setText("Client/Server Communication");

        btn_Connect.setText("Connect");
        btn_Connect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_ConnectMouseClicked(evt);
            }
        });
        btn_Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ConnectActionPerformed(evt);
            }
        });

        txt_Communication.setColumns(20);
        txt_Communication.setRows(5);
        jScrollPane2.setViewportView(txt_Communication);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_server_message)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_Send)
                            .addComponent(lbl_communication))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_server_message)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbl_IP)
                                            .addComponent(lbl_Port))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txt_IP, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txt_Port, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btn_Connect)))
                                .addGap(0, 366, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_IP)
                    .addComponent(txt_IP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_Port)
                    .addComponent(txt_Port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Connect))
                .addGap(18, 18, 18)
                .addComponent(lbl_server_message)
                .addGap(18, 18, 18)
                .addComponent(txt_server_message, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_Send)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_communication)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addContainerGap())
        );

        lbl_IP.getAccessibleContext().setAccessibleName("lbl_IP");
        lbl_Port.getAccessibleContext().setAccessibleName("lbl_Port");
        txt_IP.getAccessibleContext().setAccessibleName("txt_IP");
        txt_Port.getAccessibleContext().setAccessibleName("txt_Port");
        txt_server_message.getAccessibleContext().setAccessibleName("txt_server_message");
        btn_Send.getAccessibleContext().setAccessibleName("btn_Send");
        lbl_communication.getAccessibleContext().setAccessibleName("lbl_communication");

        getAccessibleContext().setAccessibleName("lbl_server_message");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_server_messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_server_messageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_server_messageActionPerformed

    private void btn_ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ConnectActionPerformed
//        
    }//GEN-LAST:event_btn_ConnectActionPerformed

    private void btn_SendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SendActionPerformed
         
//        
        
        
    }//GEN-LAST:event_btn_SendActionPerformed

    /*
     * The mouse click event initializes the socket, buffered reader, and 
     * the data output stream if the text displays connect. The button click 
     * will also send a message to the text area saying that the server is 
     * connected. Once the button is clicked the text will change to "disconnect."
     * If the button is clicked while the text is "disconnect" then the server 
     * will be disconnected and a message will be displayed to the text area. 
     */
    
    private void btn_ConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ConnectMouseClicked
        if(btn_Connect.getText().equals("Connect"))
        {
            try {
            // establishes connection to server    
            welcomeSocket = new Socket(txt_IP.getText(), 
                    Integer.parseInt(txt_Port.getText()));
            welcomeSocket.isConnected();
        } catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(this, ex);
        }
        try {
            out = new DataOutputStream(welcomeSocket.getOutputStream());
        } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex);
        }
        try {
            in = new BufferedReader
            (new InputStreamReader(welcomeSocket.getInputStream()));
        } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex);
        }
         txt_Communication.append("Connected to server!" + "\n");
         btn_Connect.setText("Disconnect");
         
        }
        else if  (btn_Connect.getText().equals("Disconnect"))
         {
            try {
                welcomeSocket.close(); // disconnects the server
                out.close();
                in.close();
                btn_Connect.setText("Connect");
                txt_Communication.append("Disconnected!" + '\n');
                
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
         }
         
    }//GEN-LAST:event_btn_ConnectMouseClicked

    
    
    /*
     * This method handles the event of clicking the send button. This is 
     * when the program will send output to the server and then read messages
     * the server sends back. There is also a check to see when the server says
     * "Good Bye!". If this happens, then the server will be disconnected and 
     * the user will have to manually reconect using the connect button. 
     */
    
    private void btn_SendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SendMouseClicked
        clientInput = txt_server_message.getText();
        txt_Communication.append("Client: " + clientInput + '\n');
        txt_server_message.setText("");
        
        
        try {
            out.writeBytes(clientInput + '\n');
        } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex);
        }
        try {
            serverOutput = in.readLine();
            txt_Communication.append("Server: " + serverOutput + '\n');
        } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex);
        }
        
        if (serverOutput.equals("Good Bye!"))
        {
            try {
                welcomeSocket.close();
            } catch (IOException ex) {
               JOptionPane.showMessageDialog(this, ex);
            }
            btn_Connect.setText("Connect");
        }
    }//GEN-LAST:event_btn_SendMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientInterface().setVisible(true);
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Connect;
    private javax.swing.JButton btn_Send;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_IP;
    private javax.swing.JLabel lbl_Port;
    private javax.swing.JLabel lbl_communication;
    private javax.swing.JLabel lbl_server_message;
    private javax.swing.JTextArea txt_Communication;
    private javax.swing.JTextField txt_IP;
    private javax.swing.JTextField txt_Port;
    private javax.swing.JTextField txt_server_message;
    // End of variables declaration//GEN-END:variables

   
    
}
